{"ast":null,"code":"import _regeneratorRuntime from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _createForOfIteratorHelper from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _asyncToGenerator from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";export function newWebRTCClient(){var conn=new connHandler();conn.startUserMedia();conn.sendIceCandidates();conn.startListener();}// Default ICEServers - Google provides public testing server\nvar defaultIceServers={iceServers:[{urls:'stun:stun.l.google.com:19302'}]};var connHandler=/*#__PURE__*/function(){function connHandler(){var _this=this;_classCallCheck(this,connHandler);// Establish Websocket signalling channel and new PeerConnection\nthis.socket=new WebSocket(\"ws://\"+window.location.hostname+\":8050/ws\");this.peerConnection=new RTCPeerConnection(defaultIceServers);this.listener=null;// Server and client can't switch once established\n// When client needs to renegotiate it signals server to do so \nthis.peerConnection.onnegotiationneeded=function(e){console.log(\"negotiation needed\");_this.send(\"renegotiate\");};}_createClass(connHandler,[{key:\"startUserMedia\",value:function startUserMedia(){var conn=this;var f=/*#__PURE__*/function(){var _startStream=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var video,_iterator,_step,track;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"startUserMedia\");_context.next=3;return navigator.mediaDevices.getUserMedia({video:true});case 3:video=_context.sent;_iterator=_createForOfIteratorHelper(video.getVideoTracks());try{for(_iterator.s();!(_step=_iterator.n()).done;){track=_step.value;conn.peerConnection.addTrack(track,video);console.log(track);}}catch(err){_iterator.e(err);}finally{_iterator.f();}case 6:case\"end\":return _context.stop();}}},_callee);}));function startStream(){return _startStream.apply(this,arguments);}return startStream;}();f();}},{key:\"startListener\",value:function startListener(){var _this2=this;console.log(\"startListener\");this.socket.onmessage=function(event){var message=JSON.parse(event.data);if(message.sdp){_this2.receiveDesc(message);}else if(message.candidate){_this2.receiveICECandidate(message);}};}},{key:\"send\",value:function send(payload){console.log(\"send: \",payload);this.socket.send(JSON.stringify(payload));}},{key:\"receiveDesc\",value:function receiveDesc(message){console.log(\"receiveDesc\",message.type);console.log(message.sdp);this.peerConnection.setRemoteDescription(new RTCSessionDescription(message));if(message.type==\"offer\"){this.sendAnswer();}}},{key:\"sendAnswer\",value:function sendAnswer(){console.log(\"sendAnswer\");var conn=this;conn.peerConnection.createAnswer().then(function(answer){conn.send(answer);return conn.peerConnection.setLocalDescription(answer);});}},{key:\"sendIceCandidates\",value:function sendIceCandidates(){var _this3=this;console.log(\"sendIceCandidate\");return this.peerConnection.onicecandidate=function(event){if(_this3.socketOpen()&&event.candidate!=null){_this3.send(event.candidate);}};}},{key:\"receiveICECandidate\",value:function receiveICECandidate(message){console.log(\"receiveICEcandidate: \",message);this.peerConnection.addIceCandidate(message);}},{key:\"socketOpen\",value:function socketOpen(){return this.socket.readyState==WebSocket.OPEN;}}]);return connHandler;}();","map":{"version":3,"sources":["/home/cmelgreen/GoProjects/src/ReactUserMedia/frontend/src/camera/webRTCRefactor.js"],"names":["newWebRTCClient","conn","connHandler","startUserMedia","sendIceCandidates","startListener","defaultIceServers","iceServers","urls","socket","WebSocket","window","location","hostname","peerConnection","RTCPeerConnection","listener","onnegotiationneeded","e","console","log","send","f","navigator","mediaDevices","getUserMedia","video","getVideoTracks","track","addTrack","startStream","onmessage","event","message","JSON","parse","data","sdp","receiveDesc","candidate","receiveICECandidate","payload","stringify","type","setRemoteDescription","RTCSessionDescription","sendAnswer","createAnswer","then","answer","setLocalDescription","onicecandidate","socketOpen","addIceCandidate","readyState","OPEN"],"mappings":"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","sourcesContent":["export function newWebRTCClient() { \n    var conn = new connHandler()\n\n    conn.startUserMedia()\n    conn.sendIceCandidates()\n    conn.startListener()\n}\n\n// Default ICEServers - Google provides public testing server\nconst defaultIceServers = {\n    iceServers: [\n        {\n            urls: 'stun:stun.l.google.com:19302'\n        }\n    ]\n}\n\nclass connHandler {\n    constructor() {\n        // Establish Websocket signalling channel and new PeerConnection\n        this.socket = new WebSocket(\"ws://\" + window.location.hostname + \":8050/ws\")\n        this.peerConnection = new RTCPeerConnection(defaultIceServers)\n        this.listener = null\n\n        \n        // Server and client can't switch once established\n        // When client needs to renegotiate it signals server to do so \n        this.peerConnection.onnegotiationneeded = e => {\n            console.log(\"negotiation needed\")\n            this.send(\"renegotiate\")\n        }\n    }\n    \n    startUserMedia() {\n        let conn = this\n        const f = async function startStream() {\n            console.log(\"startUserMedia\")\n            var video = await navigator.mediaDevices.getUserMedia({ video: true })\n            for (const track of video.getVideoTracks()) {\n                conn.peerConnection.addTrack(track, video)\n                console.log(track)\n            }\n        }\n        f()\n    }\n\n    startListener() {\n        console.log(\"startListener\")\n        this.socket.onmessage = event => {\n            var message = JSON.parse(event.data)\n            if (message.sdp) {\n                this.receiveDesc(message)\n            } else if (message.candidate) {\n                this.receiveICECandidate(message)\n            }\n        }\n    }\n\n\n    send(payload) {\n        console.log(\"send: \", payload)\n        this.socket.send(JSON.stringify(payload))\n    }\n\n    receiveDesc(message) {\n        console.log(\"receiveDesc\", message.type)\n        console.log(message.sdp)\n        this.peerConnection.setRemoteDescription(new RTCSessionDescription(message))\n        if (message.type == \"offer\") {\n            this.sendAnswer()\n        }\n    }\n\n    sendAnswer() {\n        console.log(\"sendAnswer\")\n        let conn = this\n        conn.peerConnection.createAnswer()\n            .then(answer => {\n                conn.send(answer)\n                return conn.peerConnection.setLocalDescription(answer)\n            })\n    }\n\n    sendIceCandidates() {\n        console.log(\"sendIceCandidate\")\n        return this.peerConnection.onicecandidate = event => {\n            if ( this.socketOpen() && event.candidate != null) {\n             this.send(event.candidate)\n            }}\n    }\n\n    receiveICECandidate(message) {\n        console.log(\"receiveICEcandidate: \", message)\n        this.peerConnection.addIceCandidate(message)\n    }\n\n    socketOpen() {\n        return ( this.socket.readyState == WebSocket.OPEN )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}