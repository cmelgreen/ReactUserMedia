{"ast":null,"code":"import _regeneratorRuntime from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";export function newWebRTCClient(){var conn=new connHandler();conn.negotiate();}var defaultIceServers={iceServers:[{urls:'stun:stun.l.google.com:19302'}]};var connHandler=/*#__PURE__*/function(){function connHandler(){_classCallCheck(this,connHandler);this.socket=new WebSocket(\"ws://\"+window.location.hostname+\":8050/ws\");this.peerConnection=new RTCPeerConnection(defaultIceServers);this.listener=null;this.start=/*#__PURE__*/function(){var _startStream=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return navigator.mediaDevices.getUserMedia({video:true});case 2:this.video=_context.sent;case 3:case\"end\":return _context.stop();}}},_callee,this);}));function startStream(){return _startStream.apply(this,arguments);}return startStream;}();}_createClass(connHandler,[{key:\"negotiate\",value:function negotiate(){var _this=this;this.peerConnection.createOffer().then(function(d){return _this.peerConnection.setLocalDescription(d);});this.startListener();this.addUserMedia();this.sendIceCandidates();// this.receiveIceCandidates()\n}},{key:\"startListener\",value:function startListener(){console.log(\"startListener\");this.listener=this.newListener();}},{key:\"newListener\",value:function newListener(){console.log(\"newListener\");return this.socket.onmessage=function(event){var message=JSON.parse(event.data);console.log(message,message.spd);console.log(\"spd: \",message.spd);if(message.spd){console.log(\"true\");this.receiveOffer(message);}};}},{key:\"receiveOffer\",value:function receiveOffer(message){console.log(\"receoveOffer\");this.peerConnection.setRemoteDescription(new RTCSessionDescription(message),function(){if(this.isOffer()){this.sendAnswer();}},function(e){return console.log(e);});}},{key:\"sendAnswer\",value:function sendAnswer(){console.log(\"sendAnswer\");this.peerConnection.createAnswer().then(function(answer){this.send(answer);return this.peerConnection.setLocalDescription(answer);});}},{key:\"addUserMedia\",value:function addUserMedia(){console.log(\"addUserMedia\");this.start();}},{key:\"sendIceCandidates\",value:function sendIceCandidates(){var _this2=this;console.log(\"sendIceCandidate\");return this.peerConnection.onicecandidate=function(event){if(_this2.isOpen()&&event.candidate!=null){_this2.send(_this2.socket,event.candidate);}};}},{key:\"send\",value:function send(payload){console.log(\"send: \",payload);this.socket.send(JSON.stringify(payload));}},{key:\"listen\",value:function listen(){return this.socket.onmessage=function(evt){try{var message=JSON.parse(evt.data);console.log(\"receiving: \",message);if(message.sdp){}else{this.peerConnection.addIceCandidate(message).then(console.log(\"candidate added\")).catch(function(e){return console.log(e);});}}catch(e){console.log(\"error: \",e);console.log(\"message: \");}};}},{key:\"isOpen\",value:function isOpen(){return this.socket.readyState==WebSocket.OPEN;}},{key:\"isOffer\",value:function isOffer(){return this.peerConnection.remoteDescription.type==\"offer\";}},{key:\"isAnswer\",value:function isAnswer(){return this.peerConnection.remoteDescription.type==\"answer\";}}]);return connHandler;}();","map":{"version":3,"sources":["/home/cmelgreen/GoProjects/src/ReactUserMedia/frontend/src/camera/webRTCRefactor.js"],"names":["newWebRTCClient","conn","connHandler","negotiate","defaultIceServers","iceServers","urls","socket","WebSocket","window","location","hostname","peerConnection","RTCPeerConnection","listener","start","navigator","mediaDevices","getUserMedia","video","startStream","createOffer","then","d","setLocalDescription","startListener","addUserMedia","sendIceCandidates","console","log","newListener","onmessage","event","message","JSON","parse","data","spd","receiveOffer","setRemoteDescription","RTCSessionDescription","isOffer","sendAnswer","e","createAnswer","answer","send","onicecandidate","isOpen","candidate","payload","stringify","evt","sdp","addIceCandidate","catch","readyState","OPEN","remoteDescription","type"],"mappings":"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","sourcesContent":["export function newWebRTCClient() { \n    var conn = new connHandler()\n\n    conn.negotiate()\n}\n\nconst defaultIceServers = {\n    iceServers: [\n        {\n            urls: 'stun:stun.l.google.com:19302'\n        }\n    ]\n}\n\nclass connHandler {\n    constructor() {\n        this.socket = new WebSocket(\"ws://\" + window.location.hostname + \":8050/ws\")\n        this.peerConnection = new RTCPeerConnection(defaultIceServers)\n        this.listener = null\n        this.start = async function startStream() {\n            this.video = await navigator.mediaDevices.getUserMedia({ video: true })\n        }\n        \n    }\n\n    negotiate() {\n        this.peerConnection.createOffer()\n            .then(d => this.peerConnection.setLocalDescription(d))\n            this.startListener()\n            this.addUserMedia()\n            this.sendIceCandidates()\n            // this.receiveIceCandidates()\n    }\n\n    startListener() {\n        console.log(\"startListener\")\n        this.listener = this.newListener()\n    }\n\n    newListener() {\n        console.log(\"newListener\")\n        return this.socket.onmessage = function(event) {\n\n            var message = JSON.parse(event.data)\n            console.log(message, message.spd)\n            console.log(\"spd: \", message.spd)\n            if (message.spd) {\n                console.log(\"true\")\n                this.receiveOffer(message)\n            }\n        }\n    }\n\n    receiveOffer(message) {\n        console.log(\"receoveOffer\")\n        this.peerConnection.setRemoteDescription(new RTCSessionDescription(message), function () {\n            if ( this.isOffer() ) {\n                this.sendAnswer()\n            }\n        }, e => console.log(e))\n    }\n\n    sendAnswer() {\n        console.log(\"sendAnswer\")\n        this.peerConnection.createAnswer()\n            .then(function(answer) {\n                this.send(answer)\n                return this.peerConnection.setLocalDescription(answer)\n            })\n    }\n\n    addUserMedia() {\n        console.log(\"addUserMedia\")\n\n        this.start()\n    }\n\n    sendIceCandidates() {\n        console.log(\"sendIceCandidate\")\n        return this.peerConnection.onicecandidate = event => {\n            if ( this.isOpen() && event.candidate != null) {\n                this.send(this.socket, event.candidate)\n            }}\n    }\n\n    send(payload) {\n        console.log(\"send: \", payload)\n        this.socket.send(JSON.stringify(payload))\n    }\n\n\n\n    listen() {\n        return this.socket.onmessage = function (evt) {\n            try {\n                var message = JSON.parse(evt.data);\n                console.log(\"receiving: \", message)\n                if (message.sdp) {\n\n                } else {\n                    this.peerConnection.addIceCandidate(message)\n                        .then(console.log(\"candidate added\"))\n                        .catch( e => console.log(e))\n                }\n            } catch(e) {\n                console.log(\"error: \", e)\n                console.log(\"message: \", )\n            }\n        \n        }\n    }\n\n    isOpen() {\n        return ( this.socket.readyState == WebSocket.OPEN )\n    }\n    \n    isOffer() {\n        return ( this.peerConnection.remoteDescription.type == \"offer\" )\n    }\n    \n    isAnswer() {\n        return ( this.peerConnection.remoteDescription.type == \"answer\" )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}