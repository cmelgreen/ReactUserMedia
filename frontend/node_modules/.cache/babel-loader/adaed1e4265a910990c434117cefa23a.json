{"ast":null,"code":"export function startConnection(stream){var pc=new RTCPeerConnection({iceServers:[{urls:'stun:stun.l.google.com:19302'}]});var socket=new WebSocket(\"ws://\"+window.location.hostname+\":8050/ws\");pc.addStream(stream);pc.createOffer().then(function(d){return pc.setLocalDescription(d);});pc.onicecandidate=function(event){if(isOpen(socket)&&event.candidate!=null){send(socket,event.candidate);}};receive(socket,pc);}function isOpen(socket){return socket.readyState==WebSocket.OPEN;}function send(socket,data){socket.send(JSON.stringify(data));}function receive(socket,pc){return socket.onmessage=function(receivedString){console.log(\"string: \",receivedString);console.log(\"stringified: \",JSON.stringify(receivedString));var message=JSON.parse(JSON.stringify(receivedString));console.log(\"message: \",message);console.log(message.ice);if(message.ice){pc.addIceCandidate(message.ice).catch(function(e){console.log(\"Failure during addIceCandidate(): \"+e.name);});}pc.addIceCandidate(message).catch(function(e){console.log(\"Failure during addIceCandidate(): \"+e.name);});};}","map":{"version":3,"sources":["/home/cmelgreen/GoProjects/src/ReactUserMedia/frontend/src/camera/webRTC.js"],"names":["startConnection","stream","pc","RTCPeerConnection","iceServers","urls","socket","WebSocket","window","location","hostname","addStream","createOffer","then","d","setLocalDescription","onicecandidate","event","isOpen","candidate","send","receive","readyState","OPEN","data","JSON","stringify","onmessage","receivedString","console","log","message","parse","ice","addIceCandidate","catch","e","name"],"mappings":"AAAA,MAAO,SAASA,CAAAA,eAAT,CAAyBC,MAAzB,CAAiC,CACpC,GAAIC,CAAAA,EAAE,CAAG,GAAIC,CAAAA,iBAAJ,CAAsB,CAC3BC,UAAU,CAAE,CACR,CACIC,IAAI,CAAE,8BADV,CADQ,CADe,CAAtB,CAAT,CASA,GAAIC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,SAAJ,CAAc,QAAUC,MAAM,CAACC,QAAP,CAAgBC,QAA1B,CAAqC,UAAnD,CAAb,CAEAR,EAAE,CAACS,SAAH,CAAaV,MAAb,EACAC,EAAE,CAACU,WAAH,GAAiBC,IAAjB,CAAsB,SAAAC,CAAC,QAAIZ,CAAAA,EAAE,CAACa,mBAAH,CAAuBD,CAAvB,CAAJ,EAAvB,EAEAZ,EAAE,CAACc,cAAH,CAAoB,SAAAC,KAAK,CAAI,CACzB,GAAKC,MAAM,CAACZ,MAAD,CAAN,EAAkBW,KAAK,CAACE,SAAN,EAAmB,IAA1C,CAAgD,CAC5CC,IAAI,CAACd,MAAD,CAASW,KAAK,CAACE,SAAf,CAAJ,CACH,CACJ,CAJD,CAMAE,OAAO,CAACf,MAAD,CAASJ,EAAT,CAAP,CACH,CAED,QAASgB,CAAAA,MAAT,CAAgBZ,MAAhB,CAAwB,CACpB,MAAQA,CAAAA,MAAM,CAACgB,UAAP,EAAqBf,SAAS,CAACgB,IAAvC,CACH,CAED,QAASH,CAAAA,IAAT,CAAcd,MAAd,CAAsBkB,IAAtB,CAA4B,CACxBlB,MAAM,CAACc,IAAP,CAAYK,IAAI,CAACC,SAAL,CAAeF,IAAf,CAAZ,EACH,CAED,QAASH,CAAAA,OAAT,CAAiBf,MAAjB,CAAyBJ,EAAzB,CAA6B,CACzB,MAAOI,CAAAA,MAAM,CAACqB,SAAP,CAAmB,SAAAC,cAAc,CAAI,CACxCC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAwBF,cAAxB,EACAC,OAAO,CAACC,GAAR,CAAY,eAAZ,CAA6BL,IAAI,CAACC,SAAL,CAAeE,cAAf,CAA7B,EACA,GAAMG,CAAAA,OAAO,CAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACC,SAAL,CAAeE,cAAf,CAAX,CAAhB,CACAC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAyBC,OAAzB,EAEAF,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACE,GAApB,EACA,GAAIF,OAAO,CAACE,GAAZ,CAAiB,CACb/B,EAAE,CAACgC,eAAH,CAAmBH,OAAO,CAACE,GAA3B,EAAgCE,KAAhC,CAAsC,SAAAC,CAAC,CAAI,CACvCP,OAAO,CAACC,GAAR,CAAY,qCAAuCM,CAAC,CAACC,IAArD,EACH,CAFD,EAGH,CACDnC,EAAE,CAACgC,eAAH,CAAmBH,OAAnB,EAA4BI,KAA5B,CAAkC,SAAAC,CAAC,CAAI,CACnCP,OAAO,CAACC,GAAR,CAAY,qCAAuCM,CAAC,CAACC,IAArD,EACH,CAFD,EAGH,CAfD,CAgBH","sourcesContent":["export function startConnection(stream) {\n    let pc = new RTCPeerConnection({\n        iceServers: [\n            {\n                urls: 'stun:stun.l.google.com:19302'\n                \n            }\n        ]\n    })\n\n    var socket = new WebSocket(\"ws://\" + window.location.hostname + \":8050/ws\");\n\n    pc.addStream(stream)\n    pc.createOffer().then(d => pc.setLocalDescription(d))\n\n    pc.onicecandidate = event => {\n        if ( isOpen(socket) && event.candidate != null) {\n            send(socket, event.candidate)\n        }\n    };\n\n    receive(socket, pc)\n}\n\nfunction isOpen(socket) {\n    return (socket.readyState == WebSocket.OPEN)\n}\n\nfunction send(socket, data) {\n    socket.send(JSON.stringify(data))\n}\n\nfunction receive(socket, pc) {\n    return socket.onmessage = receivedString => {\n        console.log(\"string: \", receivedString)\n        console.log(\"stringified: \", JSON.stringify(receivedString))\n        const message = JSON.parse(JSON.stringify(receivedString));\n        console.log(\"message: \", message);\n\n        console.log(message.ice)\n        if (message.ice) {     \n            pc.addIceCandidate(message.ice).catch(e => {\n                console.log(\"Failure during addIceCandidate(): \" + e.name);\n            });\n        }\n        pc.addIceCandidate(message).catch(e => {\n            console.log(\"Failure during addIceCandidate(): \" + e.name);\n        });\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}