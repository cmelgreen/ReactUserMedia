{"ast":null,"code":"import _regeneratorRuntime from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';export function UserMedia(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),stream=_useState2[0],setStream=_useState2[1];useEffect(function(){function startStream(){return _startStream.apply(this,arguments);}function _startStream(){_startStream=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var video;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return navigator.mediaDevices.getUserMedia({video:true});case 2:video=_context.sent;setStream(video);case 4:case\"end\":return _context.stop();}}},_callee);}));return _startStream.apply(this,arguments);}startStream();},[]);return stream;}","map":{"version":3,"sources":["/home/cmelgreen/GoProjects/src/ReactUserMedia/frontend/src/camera/UserMedia.js"],"names":["useState","useEffect","UserMedia","stream","setStream","startStream","navigator","mediaDevices","getUserMedia","video"],"mappings":"6dAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,MAAO,SAASC,CAAAA,SAAT,EAAqB,eACEF,QAAQ,CAAC,IAAD,CADV,wCACnBG,MADmB,eACXC,SADW,eAG1BH,SAAS,CAAE,UAAM,SACAI,CAAAA,WADA,2IACf,mKACsBC,CAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC,CAAEC,KAAK,CAAE,IAAT,CAApC,CADtB,QACQA,KADR,eAEEL,SAAS,CAACK,KAAD,CAAT,CAFF,sDADe,8CAMfJ,WAAW,GAEZ,CARQ,CAQN,EARM,CAAT,CAUA,MAAOF,CAAAA,MAAP,CACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport function UserMedia() {\n  const [stream, setStream] = useState(null);\n\n  useEffect (() => {\n    async function startStream() {\n      const video = await navigator.mediaDevices.getUserMedia({ video: true });\n      setStream(video); \n    }\n\n    startStream();\n\n  }, []);\n\n  return stream;\n}"]},"metadata":{},"sourceType":"module"}