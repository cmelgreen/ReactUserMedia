{"ast":null,"code":"import _regeneratorRuntime from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _createForOfIteratorHelper from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _asyncToGenerator from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";export function newWebRTCClient(){var conn=new connHandler();conn.startUserMedia();conn.sendIceCandidates();conn.startListener();}// Default ICEServers - Google provides public testing server\nvar defaultIceServers={iceServers:[{urls:'stun:stun.l.google.com:19302'}]};var connHandler=/*#__PURE__*/function(){function connHandler(){var _this=this;_classCallCheck(this,connHandler);// Establish Websocket signalling channel and new PeerConnection\nthis.socket=new WebSocket(\"ws://\"+window.location.hostname+\":8050/ws\");this.peerConnection=new RTCPeerConnection(defaultIceServers);this.listener=null;// Server and client can't switch once established\n// When client needs to renegotiate it signals server to do so \nthis.peerConnection.onnegotiationneeded=function(e){_this.send(\"renegotiate\");};}_createClass(connHandler,[{key:\"send\",value:function send(payload){this.socket.send(JSON.stringify(payload));}},{key:\"startUserMedia\",value:function startUserMedia(){var conn=this;var f=/*#__PURE__*/function(){var _startStream=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var video,_iterator,_step,track;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return navigator.mediaDevices.getUserMedia({video:true});case 2:video=_context.sent;_iterator=_createForOfIteratorHelper(video.getVideoTracks());try{for(_iterator.s();!(_step=_iterator.n()).done;){track=_step.value;conn.peerConnection.addTrack(track,video);}}catch(err){_iterator.e(err);}finally{_iterator.f();}case 5:case\"end\":return _context.stop();}}},_callee);}));function startStream(){return _startStream.apply(this,arguments);}return startStream;}();f();}},{key:\"sendIceCandidates\",value:function sendIceCandidates(){var _this2=this;this.peerConnection.onicecandidate=function(event){if(_this2.socket.readyState==WebSocket.OPEN&&event.candidate!=null){_this2.send(event.candidate);}};}},{key:\"startListener\",value:function startListener(){var _this3=this;this.socket.onmessage=function(event){var message=JSON.parse(event.data);if(message.sdp){_this3.peerConnection.setRemoteDescription(new RTCSessionDescription(message));_this3.sendAnswer();}else if(message.candidate){_this3.peerConnection.addIceCandidate(message);}};}},{key:\"sendAnswer\",value:function sendAnswer(){var _this4=this;this.peerConnection.createAnswer().then(function(answer){_this4.send(answer);_this4.peerConnection.setLocalDescription(answer);});}}]);return connHandler;}();","map":{"version":3,"sources":["/home/cmelgreen/GoProjects/src/ReactUserMedia/frontend/src/camera/webRTCRefactor.js"],"names":["newWebRTCClient","conn","connHandler","startUserMedia","sendIceCandidates","startListener","defaultIceServers","iceServers","urls","socket","WebSocket","window","location","hostname","peerConnection","RTCPeerConnection","listener","onnegotiationneeded","e","send","payload","JSON","stringify","f","navigator","mediaDevices","getUserMedia","video","getVideoTracks","track","addTrack","startStream","onicecandidate","event","readyState","OPEN","candidate","onmessage","message","parse","data","sdp","setRemoteDescription","RTCSessionDescription","sendAnswer","addIceCandidate","createAnswer","then","answer","setLocalDescription"],"mappings":"mzBAAA,MAAO,SAASA,CAAAA,eAAT,EAA2B,CAC9B,GAAIC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,WAAJ,EAAX,CAEAD,IAAI,CAACE,cAAL,GACAF,IAAI,CAACG,iBAAL,GACAH,IAAI,CAACI,aAAL,GACH,CAED;AACA,GAAMC,CAAAA,iBAAiB,CAAG,CACtBC,UAAU,CAAE,CACR,CACIC,IAAI,CAAE,8BADV,CADQ,CADU,CAA1B,C,GAQMN,CAAAA,W,yBACF,sBAAc,kDACV;AACA,KAAKO,MAAL,CAAc,GAAIC,CAAAA,SAAJ,CAAc,QAAUC,MAAM,CAACC,QAAP,CAAgBC,QAA1B,CAAqC,UAAnD,CAAd,CACA,KAAKC,cAAL,CAAsB,GAAIC,CAAAA,iBAAJ,CAAsBT,iBAAtB,CAAtB,CACA,KAAKU,QAAL,CAAgB,IAAhB,CAGA;AACA;AACA,KAAKF,cAAL,CAAoBG,mBAApB,CAA0C,SAAAC,CAAC,CAAI,CAC3C,KAAI,CAACC,IAAL,CAAU,aAAV,EACH,CAFD,CAGH,C,0DAEIC,O,CAAS,CACV,KAAKX,MAAL,CAAYU,IAAZ,CAAiBE,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAjB,EACH,C,uDAEgB,CACb,GAAInB,CAAAA,IAAI,CAAG,IAAX,CACA,GAAMsB,CAAAA,CAAC,kGAAG,yLACYC,CAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC,CAAEC,KAAK,CAAE,IAAT,CAApC,CADZ,QACFA,KADE,oDAEcA,KAAK,CAACC,cAAN,EAFd,MAEN,+CAA4C,CAAjCC,KAAiC,aACxC5B,IAAI,CAACa,cAAL,CAAoBgB,QAApB,CAA6BD,KAA7B,CAAoCF,KAApC,EACH,CAJK,2GAAH,WAAkBI,CAAAA,WAAlB,oDAAkBA,CAAAA,WAAlB,IAAP,CAMAR,CAAC,GACJ,C,6DAEmB,iBAChB,KAAKT,cAAL,CAAoBkB,cAApB,CAAqC,SAAAC,KAAK,CAAI,CAC1C,GAAM,MAAI,CAACxB,MAAL,CAAYyB,UAAZ,EAA0BxB,SAAS,CAACyB,IAArC,EAA8CF,KAAK,CAACG,SAAN,EAAmB,IAAtE,CAA4E,CAC3E,MAAI,CAACjB,IAAL,CAAUc,KAAK,CAACG,SAAhB,EACA,CACJ,CAJD,CAKH,C,qDAEe,iBACZ,KAAK3B,MAAL,CAAY4B,SAAZ,CAAwB,SAAAJ,KAAK,CAAI,CAC7B,GAAIK,CAAAA,OAAO,CAAGjB,IAAI,CAACkB,KAAL,CAAWN,KAAK,CAACO,IAAjB,CAAd,CACA,GAAIF,OAAO,CAACG,GAAZ,CAAiB,CACb,MAAI,CAAC3B,cAAL,CAAoB4B,oBAApB,CAAyC,GAAIC,CAAAA,qBAAJ,CAA0BL,OAA1B,CAAzC,EACA,MAAI,CAACM,UAAL,GACH,CAHD,IAGO,IAAIN,OAAO,CAACF,SAAZ,CAAuB,CAC1B,MAAI,CAACtB,cAAL,CAAoB+B,eAApB,CAAoCP,OAApC,EACH,CACJ,CARD,CASH,C,+CAEY,iBACT,KAAKxB,cAAL,CAAoBgC,YAApB,GACKC,IADL,CACU,SAAAC,MAAM,CAAI,CACZ,MAAI,CAAC7B,IAAL,CAAU6B,MAAV,EACA,MAAI,CAAClC,cAAL,CAAoBmC,mBAApB,CAAwCD,MAAxC,EACH,CAJL,EAKH,C","sourcesContent":["export function newWebRTCClient() { \n    var conn = new connHandler()\n\n    conn.startUserMedia()\n    conn.sendIceCandidates()\n    conn.startListener()\n}\n\n// Default ICEServers - Google provides public testing server\nconst defaultIceServers = {\n    iceServers: [\n        {\n            urls: 'stun:stun.l.google.com:19302'\n        }\n    ]\n}\n\nclass connHandler {\n    constructor() {\n        // Establish Websocket signalling channel and new PeerConnection\n        this.socket = new WebSocket(\"ws://\" + window.location.hostname + \":8050/ws\")\n        this.peerConnection = new RTCPeerConnection(defaultIceServers)\n        this.listener = null\n\n        \n        // Server and client can't switch once established\n        // When client needs to renegotiate it signals server to do so \n        this.peerConnection.onnegotiationneeded = e => {\n            this.send(\"renegotiate\")\n        }\n    }\n\n    send(payload) {\n        this.socket.send(JSON.stringify(payload))\n    }\n\n    startUserMedia() {\n        let conn = this\n        const f = async function startStream() {\n            var video = await navigator.mediaDevices.getUserMedia({ video: true })\n            for (const track of video.getVideoTracks()) {\n                conn.peerConnection.addTrack(track, video)\n            }\n        }\n        f()\n    }\n\n    sendIceCandidates() {\n        this.peerConnection.onicecandidate = event => {\n            if ( (this.socket.readyState == WebSocket.OPEN) && event.candidate != null) {\n             this.send(event.candidate)\n            }\n        }\n    }\n\n    startListener() {\n        this.socket.onmessage = event => {\n            var message = JSON.parse(event.data)\n            if (message.sdp) {\n                this.peerConnection.setRemoteDescription(new RTCSessionDescription(message))\n                this.sendAnswer()\n            } else if (message.candidate) {\n                this.peerConnection.addIceCandidate(message)\n            }\n        }\n    }\n\n    sendAnswer() {\n        this.peerConnection.createAnswer()\n            .then(answer => {\n                this.send(answer)\n                this.peerConnection.setLocalDescription(answer)\n            })\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}