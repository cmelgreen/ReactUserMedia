{"ast":null,"code":"import _regeneratorRuntime from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";export function newWebRTCClient(){var conn=new connHandler();conn.negotiate();}var defaultIceServers={iceServers:[{urls:'stun:stun.l.google.com:19302'}]};var connHandler=/*#__PURE__*/function(){function connHandler(){_classCallCheck(this,connHandler);this.socket=new WebSocket(\"ws://\"+window.location.hostname+\":8050/ws\");this.peerConnection=new RTCPeerConnection(defaultIceServers);this.listener=null;this.startUserMedia=/*#__PURE__*/function(){var _startStream=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return navigator.mediaDevices.getUserMedia({video:true});case 2:video=_context.sent;this.peerConnection.addTrack(video);case 4:case\"end\":return _context.stop();}}},_callee,this);}));function startStream(){return _startStream.apply(this,arguments);}return startStream;}();}_createClass(connHandler,[{key:\"negotiate\",value:function negotiate(){var _this=this;this.peerConnection.createOffer().then(function(d){return _this.peerConnection.setLocalDescription(d);}).then(this.startListener()).then(this.startUserMedia()).then(this.sendIceCandidates());//.then(this.addMediaTrack())\n}},{key:\"startListener\",value:function startListener(){console.log(\"startListener\");this.listener=this.newListener();}},{key:\"newListener\",value:function newListener(){console.log(\"newListener\");var conn=this;this.socket.onmessage=function(event){var message=JSON.parse(event.data);if(message.sdp){conn.receiveOffer(message);}else if(message.candidate){conn.receiveICECandidate(message);}};}},{key:\"receiveOffer\",value:function receiveOffer(message){console.log(\"receiveOffer\");var conn=this;this.peerConnection.setRemoteDescription(new RTCSessionDescription(message),function(){if(conn.isOffer()){conn.sendAnswer();}},function(e){return console.log(e);});}},{key:\"sendAnswer\",value:function sendAnswer(){console.log(\"sendAnswer\");var conn=this;conn.peerConnection.createAnswer().then(function(answer){conn.send(answer);return conn.peerConnection.setLocalDescription(answer);});}},{key:\"addUserMedia\",value:function addUserMedia(){console.log(\"addUserMedia\");this.startUserMedia();}},{key:\"receiveICECandidate\",value:function receiveICECandidate(message){console.log(\"receiveICEcandidate\");this.peerConnection.addIceCandidate(message);}},{key:\"sendIceCandidates\",value:function sendIceCandidates(){var _this2=this;console.log(\"sendIceCandidate\");return this.peerConnection.onicecandidate=function(event){if(_this2.isOpen()&&event.candidate!=null){_this2.send(event.candidate);}};}},{key:\"send\",value:function send(payload){console.log(\"send: \",payload);this.socket.send(JSON.stringify(payload));}},{key:\"isOpen\",value:function isOpen(){return this.socket.readyState==WebSocket.OPEN;}},{key:\"isOffer\",value:function isOffer(){return this.peerConnection.remoteDescription.type==\"offer\";}},{key:\"isAnswer\",value:function isAnswer(){return this.peerConnection.remoteDescription.type==\"answer\";}}]);return connHandler;}();","map":{"version":3,"sources":["/home/cmelgreen/GoProjects/src/ReactUserMedia/frontend/src/camera/webRTCRefactor.js"],"names":["newWebRTCClient","conn","connHandler","negotiate","defaultIceServers","iceServers","urls","socket","WebSocket","window","location","hostname","peerConnection","RTCPeerConnection","listener","startUserMedia","navigator","mediaDevices","getUserMedia","video","addTrack","startStream","createOffer","then","d","setLocalDescription","startListener","sendIceCandidates","console","log","newListener","onmessage","event","message","JSON","parse","data","sdp","receiveOffer","candidate","receiveICECandidate","setRemoteDescription","RTCSessionDescription","isOffer","sendAnswer","e","createAnswer","answer","send","addIceCandidate","onicecandidate","isOpen","payload","stringify","readyState","OPEN","remoteDescription","type"],"mappings":"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","sourcesContent":["export function newWebRTCClient() { \n    var conn = new connHandler()\n\n    conn.negotiate()\n}\n\nconst defaultIceServers = {\n    iceServers: [\n        {\n            urls: 'stun:stun.l.google.com:19302'\n        }\n    ]\n}\n\nclass connHandler {\n    constructor() {\n        this.socket = new WebSocket(\"ws://\" + window.location.hostname + \":8050/ws\")\n        this.peerConnection = new RTCPeerConnection(defaultIceServers)\n        this.listener = null\n        this.startUserMedia = async function startStream() {\n            video = await navigator.mediaDevices.getUserMedia({ video: true })\n            this.peerConnection.addTrack(video)\n        }\n    }\n\n    negotiate() {\n        this.peerConnection.createOffer()\n            .then(d => this.peerConnection.setLocalDescription(d))\n            .then(this.startListener())\n            .then(this.startUserMedia())\n            .then(this.sendIceCandidates())\n            //.then(this.addMediaTrack())\n    }\n\n    startListener() {\n        console.log(\"startListener\")\n        this.listener = this.newListener()\n    }\n\n    newListener() {\n        console.log(\"newListener\")\n        var conn = this\n        this.socket.onmessage = function(event) {\n            var message = JSON.parse(event.data)\n            if (message.sdp) {\n                conn.receiveOffer(message)\n            } else if (message.candidate) {\n                conn.receiveICECandidate(message)\n            }\n        }\n    }\n\n    receiveOffer(message) {\n        console.log(\"receiveOffer\")\n        var conn = this\n        this.peerConnection.setRemoteDescription(new RTCSessionDescription(message), function () {\n            if ( conn.isOffer() ) {\n                conn.sendAnswer()\n            }\n        }, e => console.log(e))\n    }\n\n    sendAnswer() {\n        console.log(\"sendAnswer\")\n        var conn = this\n        conn.peerConnection.createAnswer()\n            .then(function(answer) {\n                conn.send(answer)\n                return conn.peerConnection.setLocalDescription(answer)\n            })\n    }\n\n    addUserMedia() {\n        console.log(\"addUserMedia\")\n\n        this.startUserMedia()\n    }\n\n    receiveICECandidate(message) {\n        console.log(\"receiveICEcandidate\")\n        this.peerConnection.addIceCandidate(message)\n    }\n\n    sendIceCandidates() {\n        console.log(\"sendIceCandidate\")\n        return this.peerConnection.onicecandidate = event => {\n            if ( this.isOpen() && event.candidate != null) {\n             this.send(event.candidate)\n            }}\n    }\n\n    send(payload) {\n        console.log(\"send: \", payload)\n        this.socket.send(JSON.stringify(payload))\n    }\n\n    isOpen() {\n        return ( this.socket.readyState == WebSocket.OPEN )\n    }\n    \n    isOffer() {\n        return ( this.peerConnection.remoteDescription.type == \"offer\" )\n    }\n    \n    isAnswer() {\n        return ( this.peerConnection.remoteDescription.type == \"answer\" )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}