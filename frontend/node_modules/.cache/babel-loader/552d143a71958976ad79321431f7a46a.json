{"ast":null,"code":"export function startConnection(stream){var pc=new RTCPeerConnection({iceServers:[{urls:'stun:stun.l.google.com:19302'}]});var socket=new WebSocket(\"ws://\"+window.location.hostname+\":8050/ws\");pc.addStream(stream);pc.createOffer().then(function(d){return pc.setLocalDescription(d);});pc.onicecandidate=function(event){if(isOpen(socket)&&event.candidate!=null){send(socket,event.candidate);}};receive(socket,pc);}function isOpen(socket){return socket.readyState==WebSocket.OPEN;}function send(socket,data){socket.send(JSON.stringify(data));}function receive(socket,pc){return socket.onmessage=function(evt){if(!pc)start(false);var message=JSON.parse(evt.data);if(message.sdp)pc.setRemoteDescription(new RTCSessionDescription(message),function(){// if we received an offer, we need to answer\nif(pc.remoteDescription.type==\"offer\")pc.createAnswer(localDescCreated,logError);},logError);else pc.addIceCandidate(new RTCIceCandidate(message.candidate),function(){},logError);};}","map":{"version":3,"sources":["/home/cmelgreen/GoProjects/src/ReactUserMedia/frontend/src/camera/webRTC.js"],"names":["startConnection","stream","pc","RTCPeerConnection","iceServers","urls","socket","WebSocket","window","location","hostname","addStream","createOffer","then","d","setLocalDescription","onicecandidate","event","isOpen","candidate","send","receive","readyState","OPEN","data","JSON","stringify","onmessage","evt","start","message","parse","sdp","setRemoteDescription","RTCSessionDescription","remoteDescription","type","createAnswer","localDescCreated","logError","addIceCandidate","RTCIceCandidate"],"mappings":"AAAA,MAAO,SAASA,CAAAA,eAAT,CAAyBC,MAAzB,CAAiC,CACpC,GAAIC,CAAAA,EAAE,CAAG,GAAIC,CAAAA,iBAAJ,CAAsB,CAC3BC,UAAU,CAAE,CACR,CACIC,IAAI,CAAE,8BADV,CADQ,CADe,CAAtB,CAAT,CASA,GAAIC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,SAAJ,CAAc,QAAUC,MAAM,CAACC,QAAP,CAAgBC,QAA1B,CAAqC,UAAnD,CAAb,CAEAR,EAAE,CAACS,SAAH,CAAaV,MAAb,EACAC,EAAE,CAACU,WAAH,GAAiBC,IAAjB,CAAsB,SAAAC,CAAC,QAAIZ,CAAAA,EAAE,CAACa,mBAAH,CAAuBD,CAAvB,CAAJ,EAAvB,EAEAZ,EAAE,CAACc,cAAH,CAAoB,SAAAC,KAAK,CAAI,CACzB,GAAKC,MAAM,CAACZ,MAAD,CAAN,EAAkBW,KAAK,CAACE,SAAN,EAAmB,IAA1C,CAAgD,CAC5CC,IAAI,CAACd,MAAD,CAASW,KAAK,CAACE,SAAf,CAAJ,CACH,CACJ,CAJD,CAMAE,OAAO,CAACf,MAAD,CAASJ,EAAT,CAAP,CACH,CAED,QAASgB,CAAAA,MAAT,CAAgBZ,MAAhB,CAAwB,CACpB,MAAQA,CAAAA,MAAM,CAACgB,UAAP,EAAqBf,SAAS,CAACgB,IAAvC,CACH,CAED,QAASH,CAAAA,IAAT,CAAcd,MAAd,CAAsBkB,IAAtB,CAA4B,CACxBlB,MAAM,CAACc,IAAP,CAAYK,IAAI,CAACC,SAAL,CAAeF,IAAf,CAAZ,EACH,CAED,QAASH,CAAAA,OAAT,CAAiBf,MAAjB,CAAyBJ,EAAzB,CAA6B,CACzB,MAAOI,CAAAA,MAAM,CAACqB,SAAP,CAAmB,SAAUC,GAAV,CAAe,CACrC,GAAI,CAAC1B,EAAL,CACI2B,KAAK,CAAC,KAAD,CAAL,CAEJ,GAAIC,CAAAA,OAAO,CAAGL,IAAI,CAACM,KAAL,CAAWH,GAAG,CAACJ,IAAf,CAAd,CACA,GAAIM,OAAO,CAACE,GAAZ,CACI9B,EAAE,CAAC+B,oBAAH,CAAwB,GAAIC,CAAAA,qBAAJ,CAA0BJ,OAA1B,CAAxB,CAA4D,UAAY,CACpE;AACA,GAAI5B,EAAE,CAACiC,iBAAH,CAAqBC,IAArB,EAA6B,OAAjC,CACIlC,EAAE,CAACmC,YAAH,CAAgBC,gBAAhB,CAAkCC,QAAlC,EACP,CAJD,CAIGA,QAJH,EADJ,IAOIrC,CAAAA,EAAE,CAACsC,eAAH,CAAmB,GAAIC,CAAAA,eAAJ,CAAoBX,OAAO,CAACX,SAA5B,CAAnB,CACI,UAAY,CAAE,CADlB,CACoBoB,QADpB,EAEP,CAdD,CAeH","sourcesContent":["export function startConnection(stream) {\n    let pc = new RTCPeerConnection({\n        iceServers: [\n            {\n                urls: 'stun:stun.l.google.com:19302'\n                \n            }\n        ]\n    })\n\n    var socket = new WebSocket(\"ws://\" + window.location.hostname + \":8050/ws\");\n\n    pc.addStream(stream)\n    pc.createOffer().then(d => pc.setLocalDescription(d))\n\n    pc.onicecandidate = event => {\n        if ( isOpen(socket) && event.candidate != null) {\n            send(socket, event.candidate)\n        }\n    };\n\n    receive(socket, pc)\n}\n\nfunction isOpen(socket) {\n    return (socket.readyState == WebSocket.OPEN)\n}\n\nfunction send(socket, data) {\n    socket.send(JSON.stringify(data))\n}\n\nfunction receive(socket, pc) {\n    return socket.onmessage = function (evt) {\n        if (!pc)\n            start(false);\n    \n        var message = JSON.parse(evt.data);\n        if (message.sdp)\n            pc.setRemoteDescription(new RTCSessionDescription(message), function () {\n                // if we received an offer, we need to answer\n                if (pc.remoteDescription.type == \"offer\")\n                    pc.createAnswer(localDescCreated, logError);\n            }, logError);\n        else\n            pc.addIceCandidate(new RTCIceCandidate(message.candidate),\n                function () {}, logError);\n    };\n}\n\n"]},"metadata":{},"sourceType":"module"}