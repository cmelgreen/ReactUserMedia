{"ast":null,"code":"import _regeneratorRuntime from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _createForOfIteratorHelper from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _asyncToGenerator from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/usr/local/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";export function newWebRTCClient(){var conn=new connHandler();conn.startUserMedia();conn.sendIceCandidates();conn.startListener();}// Default ICEServers - Google provides public testing server\nvar defaultIceServers={iceServers:[{urls:'stun:stun.l.google.com:19302'}]};var connHandler=/*#__PURE__*/function(){function connHandler(){var _this=this;_classCallCheck(this,connHandler);// Establish websocket signalling channel and new webRTCPeerConnection\nthis.socket=new WebSocket(\"ws://\"+window.location.hostname+\":8050/ws\");this.peerConnection=new RTCPeerConnection(defaultIceServers);this.source=null;this.listener=null;// Server (offer) and client (answer) can't switch once established\n// Client signals server when renegotiation is necessary\nthis.peerConnection.onnegotiationneeded=function(e){_this.send(\"renegotiate\");};}_createClass(connHandler,[{key:\"send\",value:function send(payload){this.socket.send(JSON.stringify(payload));}},{key:\"startUserMedia\",value:function startUserMedia(){// Acces getUserMedia API and stream video track\n// Add audio with \"audio: true\" and getAudioTracks()\nvar conn=this;var f=/*#__PURE__*/function(){var _startStream=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var source,_iterator,_step,track;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return navigator.mediaDevices.getUserMedia({video:true});case 2:source=_context.sent;_iterator=_createForOfIteratorHelper(source.getVideoTracks());try{for(_iterator.s();!(_step=_iterator.n()).done;){track=_step.value;conn.peerConnection.addTrack(track,source);}}catch(err){_iterator.e(err);}finally{_iterator.f();}case 5:case\"end\":return _context.stop();}}},_callee);}));function startStream(){return _startStream.apply(this,arguments);}return startStream;}();f();}},{key:\"sendIceCandidates\",value:function sendIceCandidates(){var _this2=this;// Whenever there is a new ICECandidate send to server\nthis.peerConnection.onicecandidate=function(event){if(event.candidate!=null){_this2.send(event.candidate);}};}},{key:\"startListener\",value:function startListener(){var _this3=this;// Client receives ICECandidates or Descriptions\nthis.socket.onmessage=function(event){var message=JSON.parse(event.data);if(message.sdp){// Once local and remote descriptions are synced connection will be formed\n_this3.peerConnection.setRemoteDescription(new RTCSessionDescription(message));_this3.peerConnection.createAnswer().then(function(answer){_this3.peerConnection.setLocalDescription(answer);_this3.send(answer);});}else if(message.candidate){_this3.peerConnection.addIceCandidate(message);}};}}]);return connHandler;}();","map":{"version":3,"sources":["/home/cmelgreen/GoProjects/src/ReactUserMedia/frontend/src/camera/webRTCClient.js"],"names":["newWebRTCClient","conn","connHandler","startUserMedia","sendIceCandidates","startListener","defaultIceServers","iceServers","urls","socket","WebSocket","window","location","hostname","peerConnection","RTCPeerConnection","source","listener","onnegotiationneeded","e","send","payload","JSON","stringify","f","navigator","mediaDevices","getUserMedia","video","getVideoTracks","track","addTrack","startStream","onicecandidate","event","candidate","onmessage","message","parse","data","sdp","setRemoteDescription","RTCSessionDescription","createAnswer","then","answer","setLocalDescription","addIceCandidate"],"mappings":"mzBAAA,MAAO,SAASA,CAAAA,eAAT,EAA2B,CAC9B,GAAIC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,WAAJ,EAAX,CAEAD,IAAI,CAACE,cAAL,GACAF,IAAI,CAACG,iBAAL,GACAH,IAAI,CAACI,aAAL,GACH,CAED;AACA,GAAMC,CAAAA,iBAAiB,CAAG,CACtBC,UAAU,CAAE,CACR,CACIC,IAAI,CAAE,8BADV,CADQ,CADU,CAA1B,C,GAQMN,CAAAA,W,yBACF,sBAAc,kDACV;AACA,KAAKO,MAAL,CAAc,GAAIC,CAAAA,SAAJ,CAAc,QAAUC,MAAM,CAACC,QAAP,CAAgBC,QAA1B,CAAqC,UAAnD,CAAd,CACA,KAAKC,cAAL,CAAsB,GAAIC,CAAAA,iBAAJ,CAAsBT,iBAAtB,CAAtB,CACA,KAAKU,MAAL,CAAc,IAAd,CACA,KAAKC,QAAL,CAAgB,IAAhB,CAEA;AACA;AACA,KAAKH,cAAL,CAAoBI,mBAApB,CAA0C,SAAAC,CAAC,CAAI,CAC3C,KAAI,CAACC,IAAL,CAAU,aAAV,EACH,CAFD,CAGH,C,0DAEIC,O,CAAS,CACV,KAAKZ,MAAL,CAAYW,IAAZ,CAAiBE,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAjB,EACH,C,uDAEgB,CACb;AACA;AACA,GAAIpB,CAAAA,IAAI,CAAG,IAAX,CACA,GAAMuB,CAAAA,CAAC,kGAAG,0LACaC,CAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC,CAAEC,KAAK,CAAE,IAAT,CAApC,CADb,QACFZ,MADE,oDAEcA,MAAM,CAACa,cAAP,EAFd,MAEN,+CAA6C,CAAlCC,KAAkC,aACzC7B,IAAI,CAACa,cAAL,CAAoBiB,QAApB,CAA6BD,KAA7B,CAAoCd,MAApC,EACH,CAJK,2GAAH,WAAkBgB,CAAAA,WAAlB,oDAAkBA,CAAAA,WAAlB,IAAP,CAMAR,CAAC,GACJ,C,6DAEmB,iBAChB;AACA,KAAKV,cAAL,CAAoBmB,cAApB,CAAqC,SAAAC,KAAK,CAAI,CAC1C,GAAIA,KAAK,CAACC,SAAN,EAAmB,IAAvB,CAA6B,CAC5B,MAAI,CAACf,IAAL,CAAUc,KAAK,CAACC,SAAhB,EACA,CACJ,CAJD,CAKH,C,qDAEe,iBACZ;AACA,KAAK1B,MAAL,CAAY2B,SAAZ,CAAwB,SAAAF,KAAK,CAAI,CAC7B,GAAIG,CAAAA,OAAO,CAAGf,IAAI,CAACgB,KAAL,CAAWJ,KAAK,CAACK,IAAjB,CAAd,CACA,GAAIF,OAAO,CAACG,GAAZ,CAAiB,CACb;AACA,MAAI,CAAC1B,cAAL,CAAoB2B,oBAApB,CAAyC,GAAIC,CAAAA,qBAAJ,CAA0BL,OAA1B,CAAzC,EACA,MAAI,CAACvB,cAAL,CAAoB6B,YAApB,GACKC,IADL,CACU,SAAAC,MAAM,CAAI,CACZ,MAAI,CAAC/B,cAAL,CAAoBgC,mBAApB,CAAwCD,MAAxC,EACA,MAAI,CAACzB,IAAL,CAAUyB,MAAV,EACH,CAJL,EAKH,CARD,IAQO,IAAIR,OAAO,CAACF,SAAZ,CAAuB,CAC1B,MAAI,CAACrB,cAAL,CAAoBiC,eAApB,CAAoCV,OAApC,EACH,CACJ,CAbD,CAcH,C","sourcesContent":["export function newWebRTCClient() { \n    var conn = new connHandler()\n\n    conn.startUserMedia()\n    conn.sendIceCandidates()\n    conn.startListener()\n}\n\n// Default ICEServers - Google provides public testing server\nconst defaultIceServers = {\n    iceServers: [\n        {\n            urls: 'stun:stun.l.google.com:19302'\n        }\n    ]\n}\n\nclass connHandler {\n    constructor() {\n        // Establish websocket signalling channel and new webRTCPeerConnection\n        this.socket = new WebSocket(\"ws://\" + window.location.hostname + \":8050/ws\")\n        this.peerConnection = new RTCPeerConnection(defaultIceServers)\n        this.source = null\n        this.listener = null\n\n        // Server (offer) and client (answer) can't switch once established\n        // Client signals server when renegotiation is necessary\n        this.peerConnection.onnegotiationneeded = e => {\n            this.send(\"renegotiate\")\n        }\n    }\n\n    send(payload) {\n        this.socket.send(JSON.stringify(payload))\n    }\n\n    startUserMedia() {\n        // Acces getUserMedia API and stream video track\n        // Add audio with \"audio: true\" and getAudioTracks()\n        let conn = this\n        const f = async function startStream() {\n            let source = await navigator.mediaDevices.getUserMedia({ video: true })\n            for (const track of source.getVideoTracks()) {\n                conn.peerConnection.addTrack(track, source)\n            }\n        }\n        f()\n    }\n\n    sendIceCandidates() {\n        // Whenever there is a new ICECandidate send to server\n        this.peerConnection.onicecandidate = event => {\n            if (event.candidate != null) {\n             this.send(event.candidate)\n            }\n        }\n    }\n\n    startListener() {\n        // Client receives ICECandidates or Descriptions\n        this.socket.onmessage = event => {\n            var message = JSON.parse(event.data)\n            if (message.sdp) {\n                // Once local and remote descriptions are synced connection will be formed\n                this.peerConnection.setRemoteDescription(new RTCSessionDescription(message))\n                this.peerConnection.createAnswer()\n                    .then(answer => {\n                        this.peerConnection.setLocalDescription(answer)\n                        this.send(answer)\n                    })\n            } else if (message.candidate) {\n                this.peerConnection.addIceCandidate(message)\n            }\n        }\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}