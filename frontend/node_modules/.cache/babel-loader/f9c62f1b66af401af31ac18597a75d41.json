{"ast":null,"code":"export function startConnection(stream){var pc=new RTCPeerConnection({iceServers:[{urls:'stun:stun.l.google.com:19302'}]});var socket=new WebSocket(\"ws://\"+window.location.hostname+\":8050/ws\");pc.addStream(stream);pc.createOffer().then(function(d){return pc.setLocalDescription(d);});// pc.onicecandidate = event => {\n//     if ( isOpen(socket) && event.candidate != null) {\n//         send(socket, event.candidate)\n//     }\n// };\nreceive(socket,pc);}function isOpen(socket){return socket.readyState==WebSocket.OPEN;}function send(socket,data){socket.send(JSON.stringify(data)).catch(function(e){return console.log(e);});}function receive(socket,pc){return socket.onmessage=function(evt){var message=JSON.parse(evt.data);console.log(message);console.log(pc);if(message.sdp){pc.setRemoteDescription(new RTCSessionDescription(message),function(){if(pc.remoteDescription.type==\"offer\"){console.log(\"Creating answer\");pc.createAnswer(null).then(function(answer){return function(){console.log(answer);send(answer);};});}},function(e){return console.log(\"e\");}).then(console.log(pc));}else if(message.candidate){}};}","map":{"version":3,"sources":["/home/cmelgreen/GoProjects/src/ReactUserMedia/frontend/src/camera/webRTC.js"],"names":["startConnection","stream","pc","RTCPeerConnection","iceServers","urls","socket","WebSocket","window","location","hostname","addStream","createOffer","then","d","setLocalDescription","receive","isOpen","readyState","OPEN","send","data","JSON","stringify","catch","e","console","log","onmessage","evt","message","parse","sdp","setRemoteDescription","RTCSessionDescription","remoteDescription","type","createAnswer","answer","candidate"],"mappings":"AAAA,MAAO,SAASA,CAAAA,eAAT,CAAyBC,MAAzB,CAAiC,CACpC,GAAIC,CAAAA,EAAE,CAAG,GAAIC,CAAAA,iBAAJ,CAAsB,CAC3BC,UAAU,CAAE,CACR,CACIC,IAAI,CAAE,8BADV,CADQ,CADe,CAAtB,CAAT,CASA,GAAIC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,SAAJ,CAAc,QAAUC,MAAM,CAACC,QAAP,CAAgBC,QAA1B,CAAqC,UAAnD,CAAb,CAEAR,EAAE,CAACS,SAAH,CAAaV,MAAb,EACAC,EAAE,CAACU,WAAH,GAAiBC,IAAjB,CAAsB,SAAAC,CAAC,QAAIZ,CAAAA,EAAE,CAACa,mBAAH,CAAuBD,CAAvB,CAAJ,EAAvB,EAEA;AACA;AACA;AACA;AACA;AAEAE,OAAO,CAACV,MAAD,CAASJ,EAAT,CAAP,CACH,CAED,QAASe,CAAAA,MAAT,CAAgBX,MAAhB,CAAwB,CACpB,MAAQA,CAAAA,MAAM,CAACY,UAAP,EAAqBX,SAAS,CAACY,IAAvC,CACH,CAED,QAASC,CAAAA,IAAT,CAAcd,MAAd,CAAsBe,IAAtB,CAA4B,CACxBf,MAAM,CAACc,IAAP,CAAYE,IAAI,CAACC,SAAL,CAAeF,IAAf,CAAZ,EAAkCG,KAAlC,CAAwC,SAAAC,CAAC,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAJ,EAAzC,EACH,CAED,QAAST,CAAAA,OAAT,CAAiBV,MAAjB,CAAyBJ,EAAzB,CAA6B,CACzB,MAAOI,CAAAA,MAAM,CAACsB,SAAP,CAAmB,SAAUC,GAAV,CAAe,CAErC,GAAIC,CAAAA,OAAO,CAAGR,IAAI,CAACS,KAAL,CAAWF,GAAG,CAACR,IAAf,CAAd,CACAK,OAAO,CAACC,GAAR,CAAYG,OAAZ,EACAJ,OAAO,CAACC,GAAR,CAAYzB,EAAZ,EAEA,GAAI4B,OAAO,CAACE,GAAZ,CAAiB,CACb9B,EAAE,CAAC+B,oBAAH,CAAwB,GAAIC,CAAAA,qBAAJ,CAA0BJ,OAA1B,CAAxB,CAA4D,UAAY,CACpE,GAAI5B,EAAE,CAACiC,iBAAH,CAAqBC,IAArB,EAA6B,OAAjC,CAA0C,CACtCV,OAAO,CAACC,GAAR,CAAY,iBAAZ,EACAzB,EAAE,CAACmC,YAAH,CAAgB,IAAhB,EACKxB,IADL,CACU,SAAAyB,MAAM,QAAI,WAAY,CACxBZ,OAAO,CAACC,GAAR,CAAYW,MAAZ,EACAlB,IAAI,CAACkB,MAAD,CAAJ,CACH,CAHW,EADhB,EAKH,CACJ,CATD,CASG,SAAAb,CAAC,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,CAAJ,EATJ,EAUKd,IAVL,CAUUa,OAAO,CAACC,GAAR,CAAYzB,EAAZ,CAVV,EAWH,CAZD,IAYO,IAAI4B,OAAO,CAACS,SAAZ,CAAuB,CAE7B,CAEJ,CAtBD,CAuBH","sourcesContent":["export function startConnection(stream) {\n    let pc = new RTCPeerConnection({\n        iceServers: [\n            {\n                urls: 'stun:stun.l.google.com:19302'\n                \n            }\n        ]\n    })\n\n    var socket = new WebSocket(\"ws://\" + window.location.hostname + \":8050/ws\");\n\n    pc.addStream(stream)\n    pc.createOffer().then(d => pc.setLocalDescription(d))\n\n    // pc.onicecandidate = event => {\n    //     if ( isOpen(socket) && event.candidate != null) {\n    //         send(socket, event.candidate)\n    //     }\n    // };\n\n    receive(socket, pc)\n}\n\nfunction isOpen(socket) {\n    return (socket.readyState == WebSocket.OPEN)\n}\n\nfunction send(socket, data) {\n    socket.send(JSON.stringify(data)).catch(e => console.log(e))\n}\n\nfunction receive(socket, pc) {\n    return socket.onmessage = function (evt) {\n\n        var message = JSON.parse(evt.data);\n        console.log(message)\n        console.log(pc)\n\n        if (message.sdp) {\n            pc.setRemoteDescription(new RTCSessionDescription(message), function () {\n                if (pc.remoteDescription.type == \"offer\") {\n                    console.log(\"Creating answer\")\n                    pc.createAnswer(null)\n                        .then(answer => function () {\n                            console.log(answer)\n                            send(answer)\n                        })\n                }\n            }, e => console.log(\"e\"))\n                .then(console.log(pc));\n        } else if (message.candidate) {\n\n        }\n\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}