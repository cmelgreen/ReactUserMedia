{"version":3,"sources":["camera/webRTC.js","camera/Camera.js","camera/UserMedia.js","App.js","index.js"],"names":["startConnection","stream","pc","RTCPeerConnection","iceServers","urls","socket","WebSocket","window","location","hostname","addStream","createOffer","then","d","setLocalDescription","onicecandidate","event","readyState","OPEN","isOpen","candidate","send","onmessage","evt","message","JSON","parse","data","console","log","sdp","setRemoteDescription","RTCSessionDescription","remoteDescription","type","createAnswer","answer","catch","e","addIceCandidate","receive","stringify","Camera","video","useRef","useState","setStream","useEffect","a","navigator","mediaDevices","getUserMedia","startStream","UserMedia","current","srcObject","play","Fragment","ref","width","height","autoPlay","element","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"oKAAO,SAASA,EAAgBC,GAC5B,IAAIC,EAAK,IAAIC,kBAAkB,CAC3BC,WAAY,CACR,CACIC,KAAM,mCAMdC,EAAS,IAAIC,UAAU,QAAUC,OAAOC,SAASC,SAAW,YAEhER,EAAGS,UAAUV,GACbC,EAAGU,cAAcC,MAAK,SAAAC,GAAC,OAAIZ,EAAGa,oBAAoBD,MAElDZ,EAAGc,eAAiB,SAAAC,IASxB,SAAgBX,GACZ,OAAQA,EAAOY,YAAcX,UAAUY,MAT9BC,CAAOd,IAA8B,MAAnBW,EAAMI,WACzBC,EAAKhB,EAAQW,EAAMI,YAoB/B,SAAiBf,EAAQJ,GACdI,EAAOiB,UAAY,SAAUC,GAEhC,IACI,IAAIC,EAAUC,KAAKC,MAAMH,EAAII,MAC7BC,QAAQC,IAAI,cAAeL,GACvBA,EAAQM,IACR7B,EAAG8B,qBAAqB,IAAIC,sBAAsBR,IAAU,WACvB,SAA7BvB,EAAGgC,kBAAkBC,MACrBjC,EAAGkC,eAAevB,MAAK,SAASwB,GAE5B,OADAf,EAAKhB,EAAQ+B,GACNnC,EAAGa,oBAAoBsB,MAEjCC,OAAM,SAAAC,GAAC,OAAIV,QAAQC,IAAIS,SAE7B,SAAAA,GAAC,OAAIV,QAAQC,IAAI,QAEpB5B,EAAGsC,gBAAgBf,GACdZ,KAAKgB,QAAQC,IAAI,oBACjBQ,OAAO,SAAAC,GAAC,OAAIV,QAAQC,IAAIS,MAEnC,MAAMA,GACJV,QAAQC,IAAI,UAAWS,GACvBV,QAAQC,IAAI,eAvCpBW,CAAQnC,EAAQJ,GAOpB,SAASoB,EAAKhB,EAAQsB,GAClB,IACItB,EAAOgB,KAAKI,KAAKgB,UAAUd,IAC3BC,QAAQC,IAAI,YAAaF,GAC3B,MAAMW,GACJV,QAAQC,IAAIS,IC9Bb,SAASI,IACZ,IAAMC,EAAQC,mBACR5C,ECFH,WAAsB,IAAD,EACI6C,mBAAS,MADb,mBACjB7C,EADiB,KACT8C,EADS,KAaxB,OAVAC,qBAAW,WAAM,4CACb,4BAAAC,EAAA,sEACwBC,UAAUC,aAAaC,aAAa,CAAER,OAAO,IADrE,OACUA,EADV,OAEIG,EAAUH,GACV5C,EAAgB4C,GAHpB,4CADa,uBAAC,WAAD,wBAObS,KACD,IAEIpD,EDXQqD,GAOf,OALIrD,GAAU2C,EAAMW,UAChBX,EAAMW,QAAQC,UAAYvD,EAC1B2C,EAAMW,QAAQE,QAId,kBAAC,IAAMC,SAAP,KACI,2BAAOC,IAAKf,EAAOgB,MAAM,MAAMC,OAAO,MAAMC,UAAQ,KEVhE,IAAMC,EAAU,kBAACpB,EAAD,MAED,SAASqB,IACpB,OAAQD,ECFZ,IAAME,EAAcC,SAASC,eAAe,QAE5CC,IAASC,OACL,kBAACL,EAAD,MACAC,I","file":"static/js/main.df975043.chunk.js","sourcesContent":["export function startConnection(stream) {\n    let pc = new RTCPeerConnection({\n        iceServers: [\n            {\n                urls: 'stun:stun.l.google.com:19302'\n                \n            }\n        ]\n    })\n\n    var socket = new WebSocket(\"ws://\" + window.location.hostname + \":8050/ws\");\n\n    pc.addStream(stream)\n    pc.createOffer().then(d => pc.setLocalDescription(d))\n\n    pc.onicecandidate = event => {\n        if ( isOpen(socket) && event.candidate != null) {\n            send(socket, event.candidate)\n        }\n    };\n\n    receive(socket, pc)\n}\n\nfunction isOpen(socket) {\n    return (socket.readyState == WebSocket.OPEN)\n}\n\nfunction send(socket, data) {\n    try {\n        socket.send(JSON.stringify(data))\n        console.log(\"sending: \", data)\n    } catch(e) {\n        console.log(e)\n    }\n}\n\nfunction receive(socket, pc) {\n    return socket.onmessage = function (evt) {\n\n        try {\n            var message = JSON.parse(evt.data);\n            console.log(\"receiving: \", message)\n            if (message.sdp) {\n                pc.setRemoteDescription(new RTCSessionDescription(message), function () {\n                    if (pc.remoteDescription.type == \"offer\") {\n                        pc.createAnswer().then(function(answer) {\n                            send(socket, answer);\n                            return pc.setLocalDescription(answer);\n                        })\n                        .catch(e => console.log(e));\n                    }\n                }, e => console.log(\"e\"))\n            } else {\n                pc.addIceCandidate(message)\n                    .then(console.log(\"candidate added\"))\n                    .catch( e => console.log(e))\n            }\n        } catch(e) {\n            console.log(\"error: \", e)\n            console.log(\"message: \", )\n        }\n    \n    }\n}\n\n","import React, { useRef } from 'react';\nimport { UserMedia } from './UserMedia';\n\nexport function Camera() {\n    const video = useRef();\n    const stream = UserMedia();\n\n    if (stream && video.current) {\n        video.current.srcObject = stream;\n        video.current.play();\n    }\n\n    return (\n        <React.Fragment>\n            <video ref={video} width=\"640\" height=\"480\" autoPlay/>\n        </React.Fragment>\n    );\n}","import { useState, useEffect } from 'react';\nimport { startConnection } from './webRTC';\n\nexport function UserMedia() {\n    const [stream, setStream] = useState(null);\n\n    useEffect (() => {\n        async function startStream() {\n            const video = await navigator.mediaDevices.getUserMedia({ video: true });\n            setStream(video); \n            startConnection(video);\n        }\n\n        startStream();\n    }, []);\n\n    return stream;\n}","import React from 'react';\n\nimport { Camera } from './camera/Camera.js'\n\nconst element = <Camera />\n\nexport default function App() {\n    return (element)\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n    <App />,\n    rootElement\n);\n"],"sourceRoot":""}