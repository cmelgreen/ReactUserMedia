{"version":3,"sources":["camera/webRTCRefactor.js","camera/UserMedia.js","camera/Camera.js","App.js","index.js"],"names":["defaultIceServers","iceServers","urls","connHandler","this","socket","WebSocket","window","location","hostname","peerConnection","RTCPeerConnection","listener","oniceconnectionstatechange","console","log","iceConnectionState","addEventListener","onnegotiationneeded","e","send","startUserMedia","sendIceCandidates","startListener","createOffer","then","d","setLocalDescription","conn","a","navigator","mediaDevices","getUserMedia","video","getVideoTracks","track","addTrack","f","newListener","onmessage","event","message","JSON","parse","data","sdp","receiveDesc","candidate","receiveICECandidate","type","setRemoteDescription","RTCSessionDescription","sendAnswer","createAnswer","answer","addIceCandidate","onicecandidate","isOpen","payload","stringify","readyState","OPEN","remoteDescription","UserMedia","useState","stream","setStream","useEffect","negotiate","Camera","useRef","current","srcObject","play","Fragment","ref","width","height","autoPlay","element","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.1be2c286.chunk.js","sourcesContent":["export function newWebRTCClient() { \n    var conn = new connHandler()\n\n    conn.negotiate()\n}\n\nconst defaultIceServers = {\n    iceServers: [\n        {\n            urls: 'stun:stun.l.google.com:19302'\n        }\n    ]\n}\n\nclass connHandler {\n    constructor() {\n        this.socket = new WebSocket(\"ws://\" + window.location.hostname + \":8050/ws\")\n        this.peerConnection = new RTCPeerConnection(defaultIceServers)\n        this.listener = null\n        this.peerConnection.oniceconnectionstatechange = () => console.log(\"state change\", this.peerConnection.iceConnectionState)\n        this.socket.addEventListener('open', () => {\n            console.log(\"socket open\")\n            this.peerConnection.onnegotiationneeded = e => {\n                console.log(\"negotiation needed\")\n                this.send(\"renegotiate\")\n            }\n        })\n    }\n    \n    negotiate() {\n        //this.sendOffer()\n        this.startUserMedia(this)\n        this.sendIceCandidates()\n        this.startListener()\n        //this.sendOffer()\n\n            //.then(this.addMediaTrack())\n    }\n\n    sendOffer() {\n        console.log(\"sendOffer\")\n        this.peerConnection.createOffer()\n            .then(d => {\n                this.peerConnection.setLocalDescription(d)\n                this.send(d)\n            })\n\n    }\n\n    startUserMedia(conn) {\n        const f = async function startStream() {\n            console.log(\"startUserMedia\")\n            var video = await navigator.mediaDevices.getUserMedia({ video: true })\n            for (const track of video.getVideoTracks()) {\n                conn.peerConnection.addTrack(track, video)\n                console.log(track)\n            }\n        }\n        f()\n    }\n\n    startListener() {\n        console.log(\"startListener\")\n        this.listener = this.newListener()\n    }\n\n    newListener() {\n        console.log(\"newListener\")\n        let conn = this\n        this.socket.onmessage = event => {\n            var message = JSON.parse(event.data)\n            if (message.sdp) {\n                this.receiveDesc(message)\n            } else if (message.candidate) {\n                conn.receiveICECandidate(message)\n            }\n        }\n    }\n\n    receiveDesc(message) {\n        console.log(\"receiveDesc\", message.type)\n        console.log(message.sdp)\n        this.peerConnection.setRemoteDescription(new RTCSessionDescription(message))\n        if (message.type == \"offer\") {\n            this.sendAnswer()\n        }\n    }\n\n    sendAnswer() {\n        console.log(\"sendAnswer\")\n        let conn = this\n        conn.peerConnection.createAnswer()\n            .then(answer => {\n                conn.send(answer)\n                return conn.peerConnection.setLocalDescription(answer)\n            })\n    }\n\n    addUserMedia() {\n        console.log(\"addUserMedia\")\n        this.startUserMedia()\n    }\n\n    receiveICECandidate(message) {\n        console.log(\"receiveICEcandidate: \", message)\n        this.peerConnection.addIceCandidate(message)\n    }\n\n    sendIceCandidates() {\n        console.log(\"sendIceCandidate\")\n        return this.peerConnection.onicecandidate = event => {\n            if ( this.isOpen() && event.candidate != null) {\n             this.send(event.candidate)\n            }}\n    }\n\n    send(payload) {\n        console.log(\"send: \", payload)\n        this.socket.send(JSON.stringify(payload))\n    }\n\n    isOpen() {\n        return ( this.socket.readyState == WebSocket.OPEN )\n    }\n    \n    isOffer() {\n        return ( this.peerConnection.remoteDescription.type == \"offer\" )\n    }\n    \n    isAnswer() {\n        return ( this.peerConnection.remoteDescription.type == \"answer\" )\n    }\n}\n\n","import { useState, useEffect } from 'react';\n//import { startConnection } from './webRTC';\nimport { newWebRTCClient } from './webRTCRefactor';\n\nexport function UserMedia() {\n    const [stream, setStream] = useState(null);\n\n    useEffect (() => {\n        // async function startStream() {\n        //     const video = await navigator.mediaDevices.getUserMedia({ video: true });\n        //     startConnection(video);\n        //     setStream(video); \n        // }\n\n        setStream(newWebRTCClient())\n\n        //startStream();\n    }, []);\n\n    return stream;\n}","import React, { useRef } from 'react';\nimport { UserMedia } from './UserMedia';\n\nexport function Camera() {\n    const video = useRef();\n    const stream = UserMedia();\n\n    if (stream && video.current) {\n        video.current.srcObject = stream;\n        video.current.play();\n    }\n\n    return (\n        <React.Fragment>\n            <video ref={video} width=\"640\" height=\"480\" autoPlay/>\n        </React.Fragment>\n    );\n}","import React from 'react';\n\nimport { Camera } from './camera/Camera.js'\n\nconst element = <Camera />\n\nexport default function App() {\n    return (element)\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n    <App />,\n    rootElement\n);\n"],"sourceRoot":""}