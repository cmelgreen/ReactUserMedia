{"version":3,"sources":["camera/webRTCClient.js","camera/UserMedia.js","camera/Camera.js","App.js","index.js"],"names":["defaultIceServers","iceServers","urls","userMediaSettings","video","connHandler","this","socket","WebSocket","window","location","hostname","peerConnection","RTCPeerConnection","source","listener","onnegotiationneeded","e","send","payload","JSON","stringify","conn","a","navigator","mediaDevices","getUserMedia","getVideoTracks","track","addTrack","f","onicecandidate","event","candidate","onmessage","message","parse","data","sdp","setRemoteDescription","RTCSessionDescription","createAnswer","then","answer","setLocalDescription","addIceCandidate","UserMedia","useState","stream","useEffect","startUserMedia","sendIceCandidates","startListener","webRTCClient","Camera","useRef","current","srcObject","play","Fragment","ref","width","height","muted","autoPlay","element","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"6NASA,IAAMA,EAAoB,CACtBC,WAAY,CACR,CACIC,KAAM,kCAKZC,EAAoB,CAAEC,OAAO,GAE7BC,E,WACF,aAAe,IAAD,2BAEVC,KAAKC,OAAS,IAAIC,UAAU,QAAUC,OAAOC,SAASC,SAAW,YACjEL,KAAKM,eAAiB,IAAIC,kBAAkBb,GAC5CM,KAAKQ,OAAS,KACdR,KAAKS,SAAW,KAIhBT,KAAKM,eAAeI,oBAAsB,SAAAC,GACtC,EAAKC,KAAK,gB,iDAIbC,GACDb,KAAKC,OAAOW,KAAKE,KAAKC,UAAUF,M,uCAMhC,IAAIG,EAAOhB,MACJ,uCAAG,kCAAAiB,EAAA,sEACaC,UAAUC,aAAaC,aAAavB,GADjD,OACFW,EADE,qBAEcA,EAAOa,kBAFrB,IAEN,2BAAWC,EAAkC,QACzCN,EAAKV,eAAeiB,SAASD,EAAOd,GAHlC,yEAAH,qDAMPgB,K,0CAGiB,IAAD,OAEhBxB,KAAKM,eAAemB,eAAiB,SAAAC,GACV,MAAnBA,EAAMC,WACT,EAAKf,KAAKc,EAAMC,c,sCAKR,IAAD,OAEZ3B,KAAKC,OAAO2B,UAAY,SAAAF,GACpB,IAAIG,EAAUf,KAAKgB,MAAMJ,EAAMK,MAC3BF,EAAQG,KAER,EAAK1B,eAAe2B,qBAAqB,IAAIC,sBAAsBL,IACnE,EAAKvB,eAAe6B,eACfC,MAAK,SAAAC,GACF,EAAK/B,eAAegC,oBAAoBD,GACxC,EAAKzB,KAAKyB,OAEXR,EAAQF,WACf,EAAKrB,eAAeiC,gBAAgBV,Q,KCtE7C,SAASW,IAAa,IAAD,EACIC,mBAAS,MADb,mBACjBC,EADiB,UAsBxB,OAnBAC,qBAAW,YDNR,WACH,IAAI3B,EAAO,IAAIjB,EAEfiB,EAAK4B,iBACL5B,EAAK6B,oBACL7B,EAAK8B,gBCQDC,KAUD,IAEIL,ECtBJ,SAASM,IACZ,IAAMlD,EAAQmD,mBACRP,EAASF,IAOf,OALIE,GAAU5C,EAAMoD,UAChBpD,EAAMoD,QAAQC,UAAYT,EAC1B5C,EAAMoD,QAAQE,QAId,kBAAC,IAAMC,SAAP,KACI,2BAAOC,IAAKxD,EAAOyD,MAAM,MAAMC,OAAO,MAAMC,MAAM,QAAQC,UAAQ,KCV9E,IAAMC,EAAU,kBAACX,EAAD,MAED,SAASY,IACpB,OAAQD,ECFZ,IAAME,EAAcC,SAASC,eAAe,QAE5CC,IAASC,OACL,kBAACL,EAAD,MACAC,K","file":"static/js/main.152d3efe.chunk.js","sourcesContent":["export function webRTCClient() { \n    var conn = new connHandler()\n\n    conn.startUserMedia()\n    conn.sendIceCandidates()\n    conn.startListener()\n}\n\n// Default ICEServers - Google provides public testing server\nconst defaultIceServers = {\n    iceServers: [\n        {\n            urls: 'stun:stun.l.google.com:19302'\n        }\n    ]\n}\n\nconst userMediaSettings = { video: true }\n\nclass connHandler {\n    constructor() {\n        // Establish websocket signalling channel and new webRTCPeerConnection\n        this.socket = new WebSocket(\"ws://\" + window.location.hostname + \":8080/ws\")\n        this.peerConnection = new RTCPeerConnection(defaultIceServers)\n        this.source = null\n        this.listener = null\n\n        // Server (offer) and client (answer) can't switch once established\n        // Client signals server when renegotiation is necessary\n        this.peerConnection.onnegotiationneeded = e => {\n            this.send(\"renegotiate\")\n        }\n    }\n\n    send(payload) {\n        this.socket.send(JSON.stringify(payload))\n    }\n\n    startUserMedia() {\n        // Acces getUserMedia API and stream video track\n        // Add audio with \"audio: true\" and getAudioTracks()\n        let conn = this\n        const f = async function startStream() {\n            let source = await navigator.mediaDevices.getUserMedia(userMediaSettings)\n            for (const track of source.getVideoTracks()) {\n                conn.peerConnection.addTrack(track, source)\n            }\n        }\n        f()\n    }\n\n    sendIceCandidates() {\n        // Whenever there is a new ICECandidate send to server\n        this.peerConnection.onicecandidate = event => {\n            if (event.candidate != null) {\n             this.send(event.candidate)\n            }\n        }\n    }\n\n    startListener() {\n        // Client receives ICECandidates or Descriptions\n        this.socket.onmessage = event => {\n            var message = JSON.parse(event.data)\n            if (message.sdp) {\n                // Once local and remote descriptions are synced connection will be formed\n                this.peerConnection.setRemoteDescription(new RTCSessionDescription(message))\n                this.peerConnection.createAnswer()\n                    .then(answer => {\n                        this.peerConnection.setLocalDescription(answer)\n                        this.send(answer)\n                    })\n            } else if (message.candidate) {\n                this.peerConnection.addIceCandidate(message)\n            }\n        }\n    }\n}\n\n","import { useState, useEffect } from 'react';\nimport { webRTCClient } from './webRTCClient';\n\nexport function UserMedia() {\n    const [stream, setStream] = useState(null);\n\n    useEffect (() => {\n\n        // async function startStream() {\n        //     const video = await navigator.mediaDevices.getUserMedia({ video: true });\n        //     setStream(video); \n        // }\n\n        webRTCClient()\n\n        // function startStream() {\n        //     pc.ontrack = event => {\n        //     console.log(\"ontrack: \", event.streams[0])\n        //     const video = event.streams[0]\n        //     setStream(video)\n        // }\n        //startStream()\n\n    }, []);\n\n    return stream;\n}","import React, { useRef } from 'react';\nimport { UserMedia } from './UserMedia';\n\nexport function Camera() {\n    const video = useRef();\n    const stream = UserMedia();\n\n    if (stream && video.current) {\n        video.current.srcObject = stream;\n        video.current.play();\n    }\n\n    return (\n        <React.Fragment>\n            <video ref={video} width=\"640\" height=\"480\" muted=\"muted\" autoPlay/>\n        </React.Fragment>\n    );\n}","import React from 'react';\n\nimport { Camera } from './camera/Camera.js'\n\nconst element = <Camera />\n\nexport default function App() {\n    return (element)\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n    <App />,\n    rootElement\n);\n"],"sourceRoot":""}