{"version":3,"sources":["camera/webRTCRefactor.js","camera/UserMedia.js","camera/Camera.js","App.js","index.js"],"names":["defaultIceServers","iceServers","urls","connHandler","this","socket","WebSocket","window","location","hostname","peerConnection","RTCPeerConnection","listener","oniceconnectionstatechange","console","log","iceConnectionState","onnegotiationneeded","e","createOffer","then","offer","setLocalDescription","d","startUserMedia","sendIceCandidates","startListener","conn","a","navigator","mediaDevices","getUserMedia","video","getVideoTracks","track","addTrack","f","newListener","onmessage","event","message","JSON","parse","data","sdp","receiveOffer","candidate","receiveICECandidate","setRemoteDescription","RTCSessionDescription","sendAnswer","createAnswer","answer","send","addIceCandidate","onicecandidate","isOpen","payload","stringify","readyState","OPEN","remoteDescription","type","UserMedia","useState","stream","setStream","useEffect","negotiate","Camera","useRef","current","srcObject","play","Fragment","ref","width","height","autoPlay","element","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.69a202b2.chunk.js","sourcesContent":["export function newWebRTCClient() { \n    var conn = new connHandler()\n\n    conn.negotiate()\n}\n\nconst defaultIceServers = {\n    iceServers: [\n        {\n            urls: 'stun:stun.l.google.com:19302'\n        }\n    ]\n}\n\nclass connHandler {\n    constructor() {\n        this.socket = new WebSocket(\"ws://\" + window.location.hostname + \":8050/ws\")\n        this.peerConnection = new RTCPeerConnection(defaultIceServers)\n        this.listener = null\n        this.peerConnection.oniceconnectionstatechange = () => console.log(\"state change\", this.peerConnection.iceConnectionState)\n        this.peerConnection.onnegotiationneeded = e => this.peerConnection.createOffer()\n            .then(offer => this.peerConnection.setLocalDescription(offer))\n            .then(() => {\n                console.log(\"onnegotationneeded\")\n                //this.send(this.peerConnection.localDescription)\n            })\n    }\n\n    negotiate() {\n        this.peerConnection.createOffer()\n            .then(d => this.peerConnection.setLocalDescription(d))\n        this.startUserMedia(this)\n        this.sendIceCandidates()\n        this.startListener()\n\n            //.then(this.addMediaTrack())\n    }\n\n    startUserMedia(conn) {\n        const f = async function startStream() {\n            console.log(\"startUserMedia F\")\n            var video = await navigator.mediaDevices.getUserMedia({ video: true })\n            for (const track of video.getVideoTracks()) {\n                conn.peerConnection.addTrack(track, video)\n                console.log(conn, track)\n            }\n        }\n        f()\n    }\n\n    startListener() {\n        console.log(\"startListener\")\n        this.listener = this.newListener()\n    }\n\n    newListener() {\n        console.log(\"newListener\")\n        let conn = this\n        this.socket.onmessage = event => {\n            var message = JSON.parse(event.data)\n            if (message.sdp) {\n                conn.receiveOffer(message)\n            } else if (message.candidate) {\n                conn.receiveICECandidate(message)\n            }\n        }\n    }\n\n    receiveOffer(message) {\n        console.log(\"receiveOffer\")\n        this.peerConnection.setRemoteDescription(new RTCSessionDescription(message))\n        this.sendAnswer()\n    }\n\n    sendAnswer() {\n        console.log(\"sendAnswer\")\n        let conn = this\n        conn.peerConnection.createAnswer()\n            .then(answer => {\n                console.log(answer)\n                conn.send(answer)\n                return conn.peerConnection.setLocalDescription(answer)\n            })\n    }\n\n    addUserMedia() {\n        console.log(\"addUserMedia\")\n        this.startUserMedia()\n    }\n\n    receiveICECandidate(message) {\n        console.log(\"receiveICEcandidate: \", message)\n        this.peerConnection.addIceCandidate(message)\n    }\n\n    sendIceCandidates() {\n        console.log(\"sendIceCandidate\")\n        return this.peerConnection.onicecandidate = event => {\n            if ( this.isOpen() && event.candidate != null) {\n             this.send(event.candidate)\n            }}\n    }\n\n    send(payload) {\n        console.log(\"send: \", payload)\n        this.socket.send(JSON.stringify(payload))\n    }\n\n    isOpen() {\n        return ( this.socket.readyState == WebSocket.OPEN )\n    }\n    \n    isOffer() {\n        return ( this.peerConnection.remoteDescription.type == \"offer\" )\n    }\n    \n    isAnswer() {\n        return ( this.peerConnection.remoteDescription.type == \"answer\" )\n    }\n}\n\n","import { useState, useEffect } from 'react';\n//import { startConnection } from './webRTC';\nimport { newWebRTCClient } from './webRTCRefactor';\n\nexport function UserMedia() {\n    const [stream, setStream] = useState(null);\n\n    useEffect (() => {\n        // async function startStream() {\n        //     const video = await navigator.mediaDevices.getUserMedia({ video: true });\n        //     startConnection(video);\n        //     setStream(video); \n        // }\n\n        setStream(newWebRTCClient())\n\n        //startStream();\n    }, []);\n\n    return stream;\n}","import React, { useRef } from 'react';\nimport { UserMedia } from './UserMedia';\n\nexport function Camera() {\n    const video = useRef();\n    const stream = UserMedia();\n\n    if (stream && video.current) {\n        video.current.srcObject = stream;\n        video.current.play();\n    }\n\n    return (\n        <React.Fragment>\n            <video ref={video} width=\"640\" height=\"480\" autoPlay/>\n        </React.Fragment>\n    );\n}","import React from 'react';\n\nimport { Camera } from './camera/Camera.js'\n\nconst element = <Camera />\n\nexport default function App() {\n    return (element)\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n    <App />,\n    rootElement\n);\n"],"sourceRoot":""}