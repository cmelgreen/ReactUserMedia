{"version":3,"sources":["camera/webRTC.js","camera/Camera.js","camera/UserMedia.js","App.js","index.js"],"names":["startConnection","stream","pc","RTCPeerConnection","iceServers","urls","addStream","createOffer","then","d","setLocalDescription","onicecandidate","event","candidate","data","xhttp","XMLHttpRequest","open","setRequestHeader","send","localDescription","Camera","video","useRef","useState","setStream","useEffect","a","navigator","mediaDevices","getUserMedia","startStream","UserMedia","current","srcObject","play","Fragment","ref","width","height","autoPlay","element","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"oKAAO,SAASA,EAAgBC,GAC5B,IAAIC,EAAK,IAAIC,kBAAkB,CAC3BC,WAAY,CACR,CACIC,KAAM,mCAMlBH,EAAGI,UAAUL,GACbC,EAAGK,cAAcC,MAAK,SAAAC,GAAC,OAAIP,EAAGQ,oBAAoBD,MAElDP,EAAGS,eAAiB,SAAAC,GACO,MAAnBA,EAAMC,WAMlB,SAAcC,GACV,IAAIC,EAAQ,IAAIC,eAChBD,EAAME,KAAK,OAAQ,OAAO,GAC1BF,EAAMG,iBAAiB,eAAgB,oBACvCH,EAAMI,KAAKL,GATHK,CAAKjB,EAAGkB,mBCZb,SAASC,IACZ,IAAMC,EAAQC,mBACRtB,ECFH,WAAsB,IAAD,EACIuB,mBAAS,MADb,mBACjBvB,EADiB,KACTwB,EADS,KAaxB,OAVAC,qBAAW,WAAM,4CACb,4BAAAC,EAAA,sEACwBC,UAAUC,aAAaC,aAAa,CAAER,OAAO,IADrE,OACUA,EADV,OAEIG,EAAUH,GACVtB,EAAgBsB,GAHpB,4CADa,uBAAC,WAAD,wBAObS,KACD,IAEI9B,EDXQ+B,GAOf,OALI/B,GAAUqB,EAAMW,UAChBX,EAAMW,QAAQC,UAAYjC,EAC1BqB,EAAMW,QAAQE,QAId,kBAAC,IAAMC,SAAP,KACI,2BAAOC,IAAKf,EAAOgB,MAAM,MAAMC,OAAO,MAAMC,UAAQ,KEVhE,IAAMC,EAAU,kBAACpB,EAAD,MAED,SAASqB,IACpB,OAAQD,ECFZ,IAAME,EAAcC,SAASC,eAAe,QAE5CC,IAASC,OACL,kBAACL,EAAD,MACAC,I","file":"static/js/main.2b879731.chunk.js","sourcesContent":["export function startConnection(stream) {\n    let pc = new RTCPeerConnection({\n        iceServers: [\n            {\n                urls: 'stun:stun.l.google.com:19302'\n                \n            }\n        ]\n    })\n\n    pc.addStream(stream)\n    pc.createOffer().then(d => pc.setLocalDescription(d))\n\n    pc.onicecandidate = event => {\n        if (event.candidate != null) {\n            send(pc.localDescription)\n        }\n    };\n}\n\nfunction send(data) {\n    var xhttp = new XMLHttpRequest();\n    xhttp.open(\"POST\", \"/ws\", true); \n    xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhttp.send(data);\n}","import React, { useRef } from 'react';\nimport { UserMedia } from './UserMedia';\n\nexport function Camera() {\n    const video = useRef();\n    const stream = UserMedia();\n\n    if (stream && video.current) {\n        video.current.srcObject = stream;\n        video.current.play();\n    }\n\n    return (\n        <React.Fragment>\n            <video ref={video} width=\"640\" height=\"480\" autoPlay/>\n        </React.Fragment>\n    );\n}","import { useState, useEffect } from 'react';\nimport { startConnection } from './webRTC';\n\nexport function UserMedia() {\n    const [stream, setStream] = useState(null);\n\n    useEffect (() => {\n        async function startStream() {\n            const video = await navigator.mediaDevices.getUserMedia({ video: true });\n            setStream(video); \n            startConnection(video);\n        }\n\n        startStream();\n    }, []);\n\n    return stream;\n}","import React from 'react';\n\nimport { Camera } from './camera/Camera.js'\n\nconst element = <Camera />\n\nexport default function App() {\n    return (element)\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n    <App />,\n    rootElement\n);\n"],"sourceRoot":""}